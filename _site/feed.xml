<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CaoXiaoqing&#39;s Blog</title>
    <description>CXQ的博客 生活爱好者</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 22 Mar 2016 20:33:21 +0800</pubDate>
    <lastBuildDate>Tue, 22 Mar 2016 20:33:21 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>MCMC方法(一):贝叶斯统计</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;(1)贝叶斯统计简史&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;(3)全概率公式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;(1)贝叶斯统计简史&lt;/h3&gt;
&lt;p&gt;贝叶斯统计缘起于托马斯.贝叶斯（Tomas Bayes, 1702-1761），一位英国长老会牧师和业余数学家。在他去世后才发表的论文“论有关机遇问题的求解”中提出了现在贝叶斯统计的基本思想，但是贝叶斯定理的现代形式实际上归因于拉普拉斯在1812的工作，拉普拉斯重新发现了贝叶斯定理，并把它用来解决天体力学、医学甚至法学的问题。但自19世纪中叶起，随着频率学派（或者称作经典统计学派）的兴起，贝叶斯解释逐渐被统计学主流所拒绝。&lt;/p&gt;

&lt;p&gt;现代贝叶斯统计学的复兴肇始于Jeffreys(1939)，从1950年代开始，经过众多统计学家的努力，贝叶斯统计学逐渐发展壮大，并发展出了贝叶斯统计决策理论这个新分支。特别到1990年代以后，随着计算方法MCMC在贝叶斯统计领域的广泛应用，解决了贝叶斯统计学长期存在的计算困难的问题，贝叶斯统计学这才迎来了它的春天。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;### (2)条件概率&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;(3)全概率公式&lt;/h3&gt;
&lt;p&gt;我也不知道&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;### (4)贝叶斯定理&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;### (5)贝叶斯推断&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sun, 20 Mar 2016 06:08:54 +0800</pubDate>
        <link>/2016/03/20/MCMC(1)-Bayes/</link>
        <guid isPermaLink="true">/2016/03/20/MCMC(1)-Bayes/</guid>
        
        
        <category>MCMC</category>
        
      </item>
    
      <item>
        <title>Hello World</title>
        <description>
&lt;p&gt;1988年来到这个世界，则象牙塔里待了21年，2015年一头扎进滚滚红尘&lt;/p&gt;

&lt;p&gt;20岁之前以为自己会成为一个牛叉的理论物理学家，于是学习数学&lt;/p&gt;

&lt;p&gt;然后发现有些事不是勤奋就能做到的&lt;/p&gt;

&lt;p&gt;于是开始数学应用&lt;/p&gt;

&lt;p&gt;世界上的事一部分是可以用数学模型解释的，另一部分则不可以&lt;/p&gt;

&lt;p&gt;我喜欢前者的纯粹，思考后者的复杂&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Mar 2016 06:14:54 +0800</pubDate>
        <link>/2016/03/19/hello-world/</link>
        <guid isPermaLink="true">/2016/03/19/hello-world/</guid>
        
        
        <category>HelloWorld</category>
        
      </item>
    
      <item>
        <title>百度Web前端技术学院(2)-JavaScript 基础</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;任务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;第一个页面交互&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#javascript&quot; id=&quot;markdown-toc-javascript&quot;&gt;了解JavaScript是什么&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#html--javascript-&quot; id=&quot;markdown-toc-html--javascript-&quot;&gt;如何在 HTML 页面加载 JavaScript 代码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#script--body-&quot; id=&quot;markdown-toc-script--body-&quot;&gt;为什么把 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 前&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#javascript-&quot; id=&quot;markdown-toc-javascript-&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#javascript-1&quot; id=&quot;markdown-toc-javascript-1&quot;&gt;JavaScript数据类型及语言基础&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;数据类型概要&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;一些要点&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;实践判断各种数据类型的方法&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;数组类型&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;值类型和引用类型的区别&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;对象的读取、遍历方式&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;深度克隆&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;对数组进行去重&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#array-&quot; id=&quot;markdown-toc-array-&quot;&gt;Array 对象&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#trim&quot; id=&quot;markdown-toc-trim&quot;&gt;实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;trim()&lt;/code&gt;&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#string&quot; id=&quot;markdown-toc-string&quot;&gt;String对象&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fn-&quot; id=&quot;markdown-toc-fn-&quot;&gt;遍历数组，使每一个元素执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt; 函数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;获取对象中第一层元素个数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dom&quot; id=&quot;markdown-toc-dom&quot;&gt;DOM&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;基本任务&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mini-&quot; id=&quot;markdown-toc-mini-&quot;&gt;mini $&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;事件&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;绑定注册事件与移除事件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#click--enter-&quot; id=&quot;markdown-toc-click--enter-&quot;&gt;click 与 enter 键事件绑定&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;事件代理&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bom&quot; id=&quot;markdown-toc-bom&quot;&gt;BOM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ajax&quot; id=&quot;markdown-toc-ajax&quot;&gt;Ajax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;练习1：处理兴趣列表&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-18&quot; id=&quot;markdown-toc-section-18&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-19&quot; id=&quot;markdown-toc-section-19&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-20&quot; id=&quot;markdown-toc-section-20&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-21&quot; id=&quot;markdown-toc-section-21&quot;&gt;练习2：倒计时&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-22&quot; id=&quot;markdown-toc-section-22&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-23&quot; id=&quot;markdown-toc-section-23&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-24&quot; id=&quot;markdown-toc-section-24&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-25&quot; id=&quot;markdown-toc-section-25&quot;&gt;练习3：图片轮播&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-26&quot; id=&quot;markdown-toc-section-26&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-27&quot; id=&quot;markdown-toc-section-27&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-28&quot; id=&quot;markdown-toc-section-28&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-29&quot; id=&quot;markdown-toc-section-29&quot;&gt;关于变速运动&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-30&quot; id=&quot;markdown-toc-section-30&quot;&gt;练习4：输入框即时提示&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-31&quot; id=&quot;markdown-toc-section-31&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-32&quot; id=&quot;markdown-toc-section-32&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-33&quot; id=&quot;markdown-toc-section-33&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-34&quot; id=&quot;markdown-toc-section-34&quot;&gt;练习5：拖拽交互&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-35&quot; id=&quot;markdown-toc-section-35&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-36&quot; id=&quot;markdown-toc-section-36&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-37&quot; id=&quot;markdown-toc-section-37&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-38&quot; id=&quot;markdown-toc-section-38&quot;&gt;最终作品&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;任务&lt;/h2&gt;

&lt;p&gt;掌握JavaScript基础知识，能够使用JavaScript编写一些复杂度不大的交互功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt; &lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002&quot;&gt;JavaScript基础&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;做完任务一的时候深深地感觉到自己的基础非常的薄弱，在这里再次感谢一下百度前端技术学院，做任务的时候深刻理解了自己平时掌握不牢固的内容，比如浮动、BFC、等高布局等。继续加油吧！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;像上一篇文章一样，写些东西记录一下。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;第一个页面交互&lt;/h2&gt;

&lt;p&gt;按照任务中的代码，在IE8下提示：&lt;code class=&quot;highlighter-rouge&quot;&gt;对象不支持“addEventListener”属性或方法&lt;/code&gt;  &lt;br /&gt;
我猜是IE8浏览器没有这个方法吧。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide&quot;&gt;JavaScript 指南-MDN&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;javascript&quot;&gt;了解JavaScript是什么&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/JavaScript_Overview#What_is_JavaScript.3F&quot;&gt;来自MDN的解释&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript 是一种跨平台，面向对象的脚本语言。作为一种小巧且轻量级的语言，JavaScript 无意于独立运行，而是被设计为可以轻易嵌入到其它的产品和应用中，比如 Web 浏览器。在宿主环境中，JavaScript 可以被连接到环境中的对象之上，以提供对其的编程控制。&lt;/p&gt;

  &lt;p&gt;核心的 JavaScript 中包含有一组核心的对象，包括 Array，Date 和 Math，以及一组核心的语言要素，包括操作符，控制结构和语句。出于多种目的，可以通过为其增补附加的对象，对核心 JavaScript 加以扩展；例如：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;客户端 JavaScript 提供了用于控制浏览器（Navigator 或者其它浏览器）以及其中的文档对象模型（DOM）的对象，从而扩展了核心 JavaScript。例如，客户端扩展允许应用程序在 HTML 的表单中加入元素，以便响应用户事件，比如鼠标点击，表单输入和页面导航。&lt;/li&gt;
    &lt;li&gt;服务器端 JavaScript 提供了服务于在服务器上运行 JavaScript 的对象，从而扩展了核心 JavaScript。例如，服务器端扩展可以允许应用程序访问关系型数据库，在应用程序的不同调用间提供信息的连续性，甚至于处理服务器之上的文件。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;借由 JavaScript 的 LiveConnect 功能，您可以让 Java 和 JavaScript 间实现通讯。从 JavaScript 中，您可以创建 Java 对象并访问它们的公共方法和域。从 Java 中，也可以访问 JavaScript 的对象，属性和方法。&lt;/p&gt;

  &lt;p&gt;Netscape 发明了 JavaScript 并将 JavaScript 首先用于 Netscape 浏览器中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;html--javascript-&quot;&gt;如何在 HTML 页面加载 JavaScript 代码&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签在 HTML 文件中添加 JavaScript 代码。&lt;/p&gt;

&lt;p&gt;我们可以将 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 代码放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; 文件中任何位置，但是我们一般放在网页的 &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; 部分。&lt;/p&gt;

&lt;p&gt;放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 部分  &lt;br /&gt;
最常用的方式是在页面中head部分放置 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素，浏览器解析 &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; 部分就会执行这个代码，然后才解析页面的其余部分。&lt;/p&gt;

&lt;p&gt;放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 部分  &lt;br /&gt;
JavaScript 代码在网页读取到该语句的时候就会执行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: javascript 作为一种脚本语言可以放在 html 页面中任何位置，但是浏览器解释 html 时是按先后顺序的，所以前面的 script 就先被执行。比如进行页面显示初始化的 js 必须放在 head 里面，因为初始化都要求提前进行（如给页面 body 设置 css 等）；而如果是通过事件调用执行的 function 那么对位置没什么要求的。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;script--body-&quot;&gt;为什么把 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 前&lt;/h3&gt;

&lt;p&gt;虽然理论上放在哪里都是可以的，但是对于前端页面优化来讲，还是放在底部是最佳的，因为如果JS执行出现错误了，最起码页面中的元素还能加载出来，因为DOM文档是从上往下的顺序执行的。    如果你还不了解DOM的加载顺序，请阅读jQuery中ready与load事件的区别。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;下面是重点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;按照HTML5标准中的HTML语法规则，如果在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 后再出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 或任何元素的开始标签，都是parse error，浏览器会忽略之前的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; ，即视作仍旧在body内。所以实际效果和写在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 之前是没有区别的。&lt;/p&gt;

&lt;p&gt;总之，这种写法虽然也能work，但是并没有带来任何额外好处，实际上出现这样的写法很可能是误解了“将script放在页面最末端”的教条。所以还是不要这样写为好。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20027966&quot;&gt;script在body闭合标签之后还是之前-知乎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19617126&quot;&gt;body 和 html 标签均没有关闭&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;javascript-&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;扩展阅读：&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;脚本位置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于脚本会阻塞页面其他资源的下载，因此推荐将所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签尽可能放到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标签的底部，以尽量减少对整个页面下载的影响。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;组织脚本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签初始下载时都会阻塞页面渲染，所以减少页面包含的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签数量有助于改善这一情况。这不仅针对外链脚本，内嵌脚本的数量同样也要限制。浏览器在解析 HTML 页面的过程中每遇到一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签，都会因执行脚本而导致一定的延时，因此最小化延迟时间将会明显改善页面的总体性能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无阻塞的脚本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;减少 JavaScript 文件大小并限制 HTTP 请求数在功能丰富的 Web 应用或大型网站上并不总是可行。Web 应用的功能越丰富，所需要的 JavaScript 代码就越多，尽管下载单个较大的 JavaScript 文件只产生一次 HTTP 请求，却会锁死浏览器的一大段时间。为避免这种情况，需要通过一些特定的技术向页面中逐步加载 JavaScript 文件，这样做在某种程度上来说不会阻塞浏览器。&lt;/p&gt;

&lt;p&gt;无阻塞脚本的秘诀在于，在页面加载完成后才加载 JavaScript 代码。这就意味着在 window 对象的 onload事件触发后再下载脚本。有多种方式可以实现这一效果。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;延迟加载脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML 4 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签定义了一个扩展属性：defer。Defer 属性指明本元素所含的脚本不会修改 DOM，因此代码能安全地延迟执行。&lt;/p&gt;

&lt;p&gt;带有 defer 属性的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。&lt;/p&gt;

&lt;p&gt;对于如下代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Script Defer Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;defer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;load&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在支持 defer 属性的浏览器上，弹出的顺序则是：”script”、”defer”、”load”。请注意，带有 defer 属性的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素不是跟在第二个后面执行，而是在 onload 事件被触发前被调用。&lt;/p&gt;

&lt;p&gt;引用的资料可能写的比较早，在 &lt;a href=&quot;http://caniuse.com/#search=defer&quot;&gt;CanIUse&lt;/a&gt; 上查了一下 defer 发现大部分浏览器都是支持的。如下图： &lt;br /&gt;
&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-defer.jpg&quot; alt=&quot;defer的支持情况&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTML 5 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。&lt;/p&gt;

&lt;p&gt;IE8,9不支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;动态脚本元素&lt;/li&gt;
  &lt;li&gt;使用 XMLHttpRequest(XHR)对象&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;原文中的总结&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;减少 JavaScript 对性能的影响有以下几种方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将所有的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签放到页面底部，也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 闭合标签之前，这能确保在脚本执行前页面已经完成了渲染。&lt;/li&gt;
  &lt;li&gt;尽可能地合并脚本。页面中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签越少，加载也就越快，响应也越迅速。无论是外链脚本还是内嵌脚本都是如此。&lt;/li&gt;
  &lt;li&gt;采用无阻塞下载 JavaScript 脚本的方法：
    &lt;ul&gt;
      &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签的 defer 属性（仅适用于 IE 和 Firefox 3.5 以上版本）；&lt;/li&gt;
      &lt;li&gt;使用动态创建的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素来下载并执行代码；&lt;/li&gt;
      &lt;li&gt;使用 XHR 对象下载 JavaScript 代码并注入页面中。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过以上策略，可以在很大程度上提高那些需要使用大量 JavaScript 的 Web 网站和应用的实际性能。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;javascript-1&quot;&gt;JavaScript数据类型及语言基础&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;数据类型概要&lt;/h3&gt;

&lt;p&gt;最新的 ECMAScript 标准定义了 7 种数据类型:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;6 种 原始类型:
    &lt;ul&gt;
      &lt;li&gt;Boolean&lt;/li&gt;
      &lt;li&gt;Null&lt;/li&gt;
      &lt;li&gt;Undefined&lt;/li&gt;
      &lt;li&gt;Number&lt;/li&gt;
      &lt;li&gt;String&lt;/li&gt;
      &lt;li&gt;Symbol (new in ECMAScript 6)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;和 Object&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;一些要点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一个没有被赋值的变量会有个默认值 undefined&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;null 与 undefined 的不同点：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  typeof null        // object (bug in ECMAScript, should be null)
  typeof undefined   // undefined
  null === undefined // false
  null == undefined // true
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;typeof null 返回 object&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Number 数字类型，它并没有为整数给出一种特定的类型。除了能够表示浮点数外，还有一些带符号的值：+Infinity，-Infinity 和 NaN (非数值，Not-a-Number)。&lt;/li&gt;
  &lt;li&gt;NaN与任何值都不相等，包括自身。应当使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;x != x&lt;/code&gt; 来判断，当且仅当 x 为 NaN 的时候，表达式的结果才为 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;。相似的函数有 &lt;code class=&quot;highlighter-rouge&quot;&gt;isNaN()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;isFinite()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;数组直接量的语法允许有可选的结尾逗号，故 &lt;code class=&quot;highlighter-rouge&quot;&gt;[,,]&lt;/code&gt; 只有两个元素而非三个。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-4&quot;&gt;实践判断各种数据类型的方法&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 判断arr是否为一个数组，返回一个bool值
function isArray(arr) {
    return typeof arr === &quot;object&quot; &amp;amp;&amp;amp; Object.prototype.toString.call(arr) === &quot;[object Array]&quot;;
}

// 判断fn是否为一个函数，返回一个bool值
function isFunction(fn) {
    return typeof fn === &quot;function&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-5&quot;&gt;数组类型&lt;/h4&gt;

&lt;p&gt;在 ECMAScript5 中，可以直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.isArray()&lt;/code&gt; 来判断数组。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Array.isArray([]);  //true
Array.isArray({});  //false
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我看《JavaScript权威指南上》没有推荐使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt;，因为可能会有多窗体(frame)存在。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这样每一个窗口都有一个自己的 JavaScript 环境，有自己的全局对象。并且每个全局对象都有自己的一组构造函数。因此一个窗体中的对象不可能是另外窗体中的构造函数的实例。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以采用了上述我写的那样的代码&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-6&quot;&gt;值类型和引用类型的区别&lt;/h3&gt;

&lt;p&gt;声明一个值类型变量，编译器会在栈上分配一个空间，这个空间对应着该值类型变量，空间里存储的就是该变量的值。引用类型的实例分配在堆上，新建一个引用类型实例，得到的变量值对应的是该实例的内存分配地址，这就像您的银行账号一样。&lt;/p&gt;

&lt;p&gt;JavaScript中原始值包括：undefined，null，布尔值，数字和字符串。引用类型主要指对象（包括数组和函数）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;原始值是不可更改的。对象的值是可修改的。&lt;/li&gt;
    &lt;li&gt;原始值的比较是值的比较。对象的比较并非值的比较。对象的值都是引用，对象的比较均是引用的比较，当且仅当他们都引用同一个基对象时，他们才相等。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-7&quot;&gt;对象的读取、遍历方式&lt;/h3&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects&quot;&gt;JavaScript 指南-使用对象&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在javascript中，一个对象可以是一个单独的拥有属性和类型的实体。我们拿它和一个杯子做下类比。一个杯子是一个对象(物体)，拥有属性。杯子有颜色，图案，重量，由什么材质构成等等。同样，javascript对象也有属性来定义它的特征。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;属性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个 javascript 对象有很多属性。一个对象的属性可以被解释成一个附加到对象上的变量。对象的属性和普通的 javascript 变量基本没什么区别，仅仅是属性属于某个对象。属性定义了对象的特征(译注：动态语言面向对象的鸭子类型)。你可以通过点符号来访问一个对象的属性。JavaScript 对象的属性也可以通过方括号访问。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;枚举&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;for...in&lt;/code&gt; 语句中使用方括号标记以枚举一个对象的所有属性。为了展示它如何工作，下面的函数当你将对象及其名称作为参数传入时，显示对象的属性：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function showProps(obj, objName) {
  var result = &quot;&quot;;
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
        result += objName + &quot;.&quot; + i + &quot; = &quot; + obj[i] + &quot;\n&quot;;
    }
  }
  return result;
}

var srcObj = {
    a: 1,
    b: {
        b1: [&quot;hello&quot;, &quot;hi&quot;],
        b2: &quot;JavaScript&quot;
    }
};

console.log(showProps(srcObj,&#39;srcObj&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;console:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;srcObj.a = 2
srcObj.b = [object Object]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty()&lt;/code&gt; 是为了确保是自己的属性而非继承的属性。&lt;/p&gt;

&lt;p&gt;可以如下写，跳过这个对象的方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function showPropsWithoutFun(obj, objName) {
    var result = &quot;&quot;;
    for (var i in obj) {
        if (!obj.hasOwnProperty(i)) {       //跳过继承属性
            continue;
        }
        if (typeof obj[i] === &quot;function&quot;) { //跳过这个对象的方法
            continue;
        }
        result += objName + &quot;.&quot; + i + &quot;=&quot; + obj[i] + &quot;\n&quot;;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;相关的方法还有：&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.keys()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.keys()&lt;/code&gt; 方法会返回一个由给定对象的所有可枚举自身属性的属性名组成的数组，数组中属性名的排列顺序和使用for-in循环遍历该对象时返回的顺序一致（两者的主要区别是 for-in 还会遍历出一个对象从其原型链上继承到的可枚举属性）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.getOwnPropertyNames()&lt;/code&gt; 方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性）组成的数组。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;创建对象的方式有三种：使用对象初始化器，使用构造函数，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create()&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create()&lt;/code&gt; 方法创建一个拥有指定原型和若干个指定属性的对象。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;继承&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有的 JavaScript 对象继承于至少一个对象。被继承的对象被称作原型，并且继承的属性可能通过构造函数的 prototype 对象找到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定义方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个方法 是关联到某个对象的函数，或者简单地说，一个方法是一个值为某个函数的对象属性。定义方法就象定义普通的函数，除了它们必须被赋给对象的某个属性。例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;objectName.methodname = function_name;

var myObj = {
  myMethod: function(params) {
    // ...do something
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;section-8&quot;&gt;深度克隆&lt;/h4&gt;

&lt;p&gt;了解值类型和引用类型的区别，了解各种对象的读取、遍历方式，并在util.js中实现以下方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整拷贝
// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等
function cloneObject(src) {
    // your implement
}

// 测试用例：
var srcObj = {
    a: 1,
    b: {
        b1: [&quot;hello&quot;, &quot;hi&quot;],
        b2: &quot;JavaScript&quot;
    }
};
var abObj = srcObj;
var tarObj = cloneObject(srcObj);

srcObj.a = 2;
srcObj.b.b1[0] = &quot;Hello&quot;;

console.log(abObj.a);
console.log(abObj.b.b1[0]);

console.log(tarObj.a);      // 1
console.log(tarObj.b.b1[0]);    // &quot;hello&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/java2000_net/article/details/3014934&quot;&gt;白话简单克隆和深度克隆&lt;/a&gt; 介绍什么是深度克隆，用羊圈和羊的图，简单深刻。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jb51.net/article/32015.htm&quot;&gt;javascript克隆对象深度介绍&lt;/a&gt; 这个代码写的太妙了，可惜找不到源地址了，都是转载来转载去的，要是你知道源地址，请留言告诉我。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;浅度克隆：基本类型为值传递，对象仍为引用传递。&lt;/p&gt;

&lt;p&gt;深度克隆：所有元素或属性均完全克隆，并于原引用类型完全独立，即，在后面修改对象的属性的时候，原对象不会被修改。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;深度克隆复制目标对象，那么就需要枚举这个对象。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;判断当前属性是否是引用类型，如果是数组或者对象，创建响应类型变量。&lt;/li&gt;
  &lt;li&gt;枚举对象内所有属性。&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;hasOwnProperty()&lt;/code&gt; 方法，排除继承的属性。&lt;/li&gt;
  &lt;li&gt;给新的对象相应位置赋值，若当前属性为引用类型（数组或对象）递归本方法。直到内部的值类型。&lt;/li&gt;
  &lt;li&gt;返回新的对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;我的代码实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function cloneObject(src) {
    // your implement
    var o; //result
    if (Object.prototype.toString.call(src) === &quot;[object Array]&quot;) {
        o = []; //判断是否是数组，并赋初始值
    } else {
        o = {};
    }
    for (var i in src) { //遍历这个对象
        if (src.hasOwnProperty(i)) { //排出继承属性
            if (typeof src[i] === &quot;object&quot;) {
                o[i] = cloneObject(src[i]); //递归赋值
            } else {
                o[i] = src[i]; //直接赋值
            }
        }
    }
    return o;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-9&quot;&gt;对数组进行去重&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;MDN Array&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/jsref_obj_array.asp&quot;&gt;JavaScript Array 对象 w3school&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组
function uniqArray(arr) {
    // your implement
}

// 使用示例
var a = [1, 3, 5, 7, 5, 3];
var b = uniqArray(a);
console.log(b); // [1, 3, 5, 7]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;新建一个空数组&lt;/li&gt;
  &lt;li&gt;遍历原数组&lt;/li&gt;
  &lt;li&gt;若新数组中不存在当前元素，将其 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 入新数组中&lt;/li&gt;
  &lt;li&gt;返回新数组&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组
function uniqArray(arr) {
    var newArr = [];    //创建空数组
    for (var i in arr) {    //遍历旧数组
        if (newArr.indexOf(arr[i]) == -1) {//如果新数组中不存在当前元素
            newArr.push(arr[i]);//新数组中加入当前元素
        }
    }
    return newArr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;相关方法与知识点：&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;array-&quot;&gt;Array 对象&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Array 对象属性&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;属性&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;constructor&lt;/td&gt;
      &lt;td&gt;返回对创建此对象的数组函数的引用。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;length&lt;/td&gt;
      &lt;td&gt;设置或返回数组中元素的数目。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prototype&lt;/td&gt;
      &lt;td&gt;使您有能力向对象添加属性和方法。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Mutator 方法，这些方法可以改变数组自身&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;移除数组的最后一个元素，返回值是被删除的元素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;push&lt;/td&gt;
      &lt;td&gt;在数组的末尾添加一个或者多个元素，返回值是新的数组的长度。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;reverse&lt;/td&gt;
      &lt;td&gt;颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个，也就是数组的索引发生了变化。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;shift&lt;/td&gt;
      &lt;td&gt;删除数组的第一个元素，返回值是删除的元素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sort&lt;/td&gt;
      &lt;td&gt;对数组中的元素进行排序。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;splice&lt;/td&gt;
      &lt;td&gt;添加或删除数组中的一个或多个元素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;unshift&lt;/td&gt;
      &lt;td&gt;添加一个或者多个元素在数组的开头，返回值是新的数组的长度。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Accessor 方法，这些过程不改变数组自身 These methods do not modify the array and return some representation of the array.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;concat&lt;/td&gt;
      &lt;td&gt;返回一个包含此数组和其他数组和/或值的结合的新数组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;indexOf&lt;/td&gt;
      &lt;td&gt;返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;join&lt;/td&gt;
      &lt;td&gt;将所有的数组元素连接成一个字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lastIndexOf&lt;/td&gt;
      &lt;td&gt;返回在数组中搜索到的与给定参数相等的元素的最后（最大）索引。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slice&lt;/td&gt;
      &lt;td&gt;返回数组中的一段。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toSource&lt;/td&gt;
      &lt;td&gt;Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.toSource method.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toString&lt;/td&gt;
      &lt;td&gt;返回代表该数组及其元素的字符,重写Object.toString 过程.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;valueOf&lt;/td&gt;
      &lt;td&gt;Returns the primitive value of the array. Overrides the Object.valueOf method.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;循环（迭代）过程&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;filter&lt;/td&gt;
      &lt;td&gt;对数组中的每一个元素调用参数中指定的过滤函数，并将对于过滤函数返回值为true的那些数组元素集合为新的数组返回。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;forEach&lt;/td&gt;
      &lt;td&gt;对数组的每一个元素依次调用参数中指定的函数。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;every&lt;/td&gt;
      &lt;td&gt;如果数组中每一个元素都满足参数中提供的测试函数，则返回真。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;map&lt;/td&gt;
      &lt;td&gt;Creates a new array with the results of calling a provided function on every element in this array.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;some&lt;/td&gt;
      &lt;td&gt;如果数组中至少有一个元素满足参数函数的测试，则返回true。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;trim&quot;&gt;实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;trim()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;String MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/jsref_obj_string.asp&quot;&gt;JavaScript String 对象 W3school&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 中级班同学跳过此题
// 实现一个简单的trim函数，用于去除一个字符串，头部和尾部的空白字符
// 假定空白字符只有半角空格、Tab
// 练习通过循环，以及字符串的一些基本方法，分别扫描字符串str头部和尾部是否有连续的空白字符，并且删掉他们，最后返回一个完成去除的字符串
function simpleTrim(str) {
    // your implement
}

// 很多同学肯定对于上面的代码看不下去，接下来，我们真正实现一个trim
// 对字符串头尾进行空格字符的去除、包括全角半角空格、Tab等，返回一个字符串
// 尝试使用一行简洁的正则表达式完成该题目
function trim(str) {
    // your implement
}

// 使用示例
var str = &#39;   hi!  &#39;;
str = trim(str);
console.log(str); // &#39;hi!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于 &lt;code class=&quot;highlighter-rouge&quot;&gt;simpleTrim()&lt;/code&gt; 做两次循环，从前面开始和从后面开始。遇到空格和Tab跳出，最后用 &lt;code class=&quot;highlighter-rouge&quot;&gt;slice()&lt;/code&gt; 取出子字符串。&lt;/p&gt;

&lt;p&gt;对于 &lt;code class=&quot;highlighter-rouge&quot;&gt;trim()&lt;/code&gt; 使用正则表达式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function simpleTrim(str) {
    var i;
    var j;
    for (i = 0; i &amp;lt; str.length; i++) { //从头遍历字符串
        if (str.charAt(i) != &quot; &quot; &amp;amp;&amp;amp; str.charAt(i) != &quot;\t&quot;) { //当不为空的时候
            break; //跳出循环
        }
    }
    for (j = str.length - 1; j &amp;gt;= 0; j--) {
        if (str.charAt(j) != &quot; &quot; &amp;amp;&amp;amp; str.charAt(j) != &quot;\t&quot;) { //当不为空的时候
            break; //跳出循环
        }
    }
    return str.slice(i, j + 1); //返回子字符串
}

function trim(str) {
    return str.replace(/^\s+|\s+$/g, &#39;&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于正则表达式：&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;正则表达式&lt;/h4&gt;

&lt;p&gt;上面的思路是匹配开头和结尾的空白字符，并全局匹配。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;：匹配字符串的开头，在多行检索中，匹配一行的开头。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;：匹配字符串的结尾，在多行检索中，匹配一行的结尾。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;：选择，匹配的是该符号左边的子表达式或右边的子表达式。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\s&lt;/code&gt;：任何 Unicode 空白符。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;：执行一个全局匹配，简言之，即找到所有匹配，而不是找到第一个之后就停止。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上来自 JavaScript权威指南（犀牛书），感觉这里面将的正则表达式还不错。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关方法和知识点：&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;string&quot;&gt;String对象&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;String 对象属性&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;属性&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;constructor&lt;/td&gt;
      &lt;td&gt;对创建该对象的函数的引用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;length&lt;/td&gt;
      &lt;td&gt;字符串的长度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prototype&lt;/td&gt;
      &lt;td&gt;允许您向对象添加属性和方法&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;String 对象方法&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;charAt()&lt;/td&gt;
      &lt;td&gt;返回在指定位置的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;charCodeAt()&lt;/td&gt;
      &lt;td&gt;返回在指定的位置的字符的 Unicode 编码。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;concat()&lt;/td&gt;
      &lt;td&gt;连接字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;indexOf()&lt;/td&gt;
      &lt;td&gt;检索字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lastIndexOf()&lt;/td&gt;
      &lt;td&gt;从后向前搜索字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;localeCompare()&lt;/td&gt;
      &lt;td&gt;用本地特定的顺序来比较两个字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;match()&lt;/td&gt;
      &lt;td&gt;找到一个或多个正则表达式的匹配。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;replace()&lt;/td&gt;
      &lt;td&gt;替换与正则表达式匹配的子串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;search()&lt;/td&gt;
      &lt;td&gt;检索与正则表达式相匹配的值。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slice()&lt;/td&gt;
      &lt;td&gt;提取字符串的片断，并在新的字符串中返回被提取的部分。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;split()&lt;/td&gt;
      &lt;td&gt;把字符串分割为字符串数组。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;substr()&lt;/td&gt;
      &lt;td&gt;从起始索引号提取字符串中指定数目的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;substring()&lt;/td&gt;
      &lt;td&gt;提取字符串中两个指定的索引号之间的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toLowerCase()&lt;/td&gt;
      &lt;td&gt;把字符串转换为小写。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toUpperCase()&lt;/td&gt;
      &lt;td&gt;把字符串转换为大写。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toString()&lt;/td&gt;
      &lt;td&gt;返回字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;valueOf()&lt;/td&gt;
      &lt;td&gt;返回某个字符串对象的原始值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;静态方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String.fromCharCode()&lt;/code&gt; 使用作为参数传入的字符编码创建一个新的字符串。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于不是标准方法，这里就不列举了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;fn-&quot;&gt;遍历数组，使每一个元素执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt; 函数&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 实现一个遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递
function each(arr, fn) {
    // your implement
}

// 其中fn函数可以接受两个参数：item和index

// 使用示例
var arr = [&#39;java&#39;, &#39;c&#39;, &#39;php&#39;, &#39;html&#39;];
function output(item) {
    console.log(item)
}
each(arr, output);  // java, c, php, html

// 使用示例
var arr = [&#39;java&#39;, &#39;c&#39;, &#39;php&#39;, &#39;html&#39;];
function output(item, index) {
    console.log(index + &#39;: &#39; + item)
}
each(arr, output);  // 0:java, 1:c, 2:php, 3:html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个任务有点像 &lt;code class=&quot;highlighter-rouge&quot;&gt;ECMAScript5&lt;/code&gt; 中新增的数组方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;forEach()&lt;/code&gt;。还有一点这里的参数 index 是可选形参，保证第一个参数 item 能正常传入就行了，代码非常简单，如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function each(arr, fn) {
    for(var i in arr){
        fn(arr[i],i);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-11&quot;&gt;获取对象中第一层元素个数&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 获取一个对象里面第一层元素的数量，返回一个整数
function getObjectLength(obj) {}

// 使用示例
var obj = {
    a: 1,
    b: 2,
    c: {
        c1: 3,
        c2: 4
    }
};
console.log(getObjectLength(obj)); // 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getObjectLength(obj) {
    return Object.keys(obj).length;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个自己写的比较简单，不知道可以这样写不。其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.keys(o)&lt;/code&gt; 为 Object 的一个静态方法，参数是一个对象，返回一个包含o的所有可枚举自有（非继承）属性名字的数组。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-12&quot;&gt;正则表达式&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 判断是否为邮箱地址
function isEmail(emailStr) {
    // your implement
}

// 判断是否为手机号
function isMobilePhone(phone) {
    // your implement
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;邮箱由（数字字母，点），数字字母组合，@符号，数字字母，（点，数字字母）。其中两个小括号都是任意个数的。并且开头和结尾都是字母。&lt;/p&gt;

&lt;p&gt;手机号是11位组成的，有时候会在前面加国际区号的前缀，如中国：+86。查阅相关资料后发现区号最多4位。&lt;a href=&quot;http://baike.baidu.com/link?url=2nwM_XyoKXLNPxk0-uDwGT4SxIFncXy7dqB3VbsH3tSaueYRri3CYOWWF9qb84zUqeKkq9uTF2YfetoiyJVm7_&quot;&gt;国际电话区号_百度百科&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;并且手机号最多就是11位，其他国家有用8位的，也有用7位，10位的都有。最短是7位，最长是11位。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 判断是否为邮箱地址
function isEmail(emailStr) {
    var pattern = /^(\w+\.)*\w+@\w+(\.\w+)+$/;
    return pattern.test(emailStr);
}

// 判断是否为手机号
function isMobilePhone(phone) {
    var pattern = /^(\+\d{1,4})?\d{7,11}$/;
    return pattern.test(phone);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;相关方法和知识点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_in_regular_expressions&quot;&gt;RegExp MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;正则表达式修饰符：&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;全局匹配&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;忽略大小写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;让开始和结束字符（^ 和 $）工作在多行模式（也就是，^ 和 $ 可以匹配字符串中每一行的开始和结束（行是由 \n 或 \r 分割的），而不只是整个输入字符串的最开始和最末尾处。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;字符类别&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[…]&lt;/td&gt;
      &lt;td&gt;方括号内的任意字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[^…]&lt;/td&gt;
      &lt;td&gt;不在方括号内的任意字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td&gt;（点号，小数点）匹配任意单个字符，但是换行符除外，包括：\n \r \u2028 或 \u2029。&lt;br /&gt;&lt;br /&gt;需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符&lt;br /&gt;&lt;br /&gt;例如，/.y/ 匹配 “yes make my day” 中的 “my” 和 “ay”，但是不匹配 “yes”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\d&lt;/td&gt;
      &lt;td&gt;匹配基本拉丁字母表（basic Latin alphabet）中的一个数字字符。等价于[0-9]。&lt;br /&gt;&lt;br /&gt;例如，/\d/ 或 /[0-9]/ 匹配 “B2 is the suite number.” 中的 ‘2’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\D&lt;/td&gt;
      &lt;td&gt;匹配任意一个不是基本拉丁字母表中数字的字符。等价于[^0-9]。&lt;br /&gt;&lt;br /&gt;例如，/\D/ 或 /[^0-9]/ 匹配 “B2 is the suite number.” 中的 ‘B’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\w&lt;/td&gt;
      &lt;td&gt;匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 [A-Za-z0-9_]。&lt;br /&gt;&lt;br /&gt;例如，/\w/ 匹配 “apple” 中的 ‘a’，”$5.28” 中的 ‘5’ 和 “3D” 中的 ‘3’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\W&lt;/td&gt;
      &lt;td&gt;匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 [^A-Za-z0-9_]。&lt;br /&gt;&lt;br /&gt;例如，/\W/ 或 /[^A-Za-z0-9_]/ 匹配 “50%” 中的 ‘%’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\s&lt;/td&gt;
      &lt;td&gt;匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。&lt;br /&gt;&lt;br /&gt;等价于 [ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​​\u202f\u205f​ \u3000]。&lt;br /&gt;&lt;br /&gt;例如 /\s\w*/ 匹配 “foo bar” 中的 ‘ bar’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\S&lt;/td&gt;
      &lt;td&gt;匹配一个非空白符。等价于 [^ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​\u202f\u205f​\u3000]。&lt;br /&gt;&lt;br /&gt;例如，/\S\w*/ 匹配 “foo bar” 中的 ‘foo’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[\b]&lt;/td&gt;
      &lt;td&gt;匹配一个退格符（backspace）（不要与 \b 混淆）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;直接量字符&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;匹配&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;数字和字母字符&lt;/td&gt;
      &lt;td&gt;自身&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\t&lt;/td&gt;
      &lt;td&gt;匹配一个水平制表符（tab）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\r&lt;/td&gt;
      &lt;td&gt;匹配一个回车符（carriage return）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\n&lt;/td&gt;
      &lt;td&gt;匹配一个换行符（linefeed）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\v&lt;/td&gt;
      &lt;td&gt;匹配一个垂直制表符（vertical tab）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\f&lt;/td&gt;
      &lt;td&gt;匹配一个换页符（form-feed）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\0&lt;/td&gt;
      &lt;td&gt;匹配一个 NUL 字符。不要在此后面跟小数点。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\cX&lt;/td&gt;
      &lt;td&gt;X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。&lt;br /&gt;&lt;br /&gt;例如，/\cM/ 匹配字符串中的 control-M。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\xhh&lt;/td&gt;
      &lt;td&gt;匹配编码为 hh （两个十六进制数字）的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\uhhhh&lt;/td&gt;
      &lt;td&gt;匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;边界&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;匹配输入/字符串的开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。&lt;br /&gt;&lt;br /&gt;例如，/^A/ 不匹配 “an A” 中的 “A”，但匹配 “An A” 中的 “A”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td&gt;匹配输入/字符串的结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。&lt;br /&gt;&lt;br /&gt;例如，/t$/ 不匹配 “eater” 中的 “t”，但匹配 “eat” 中的 “t”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td&gt;匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 [\b] 混淆）&lt;br /&gt;&lt;br /&gt;例如，/\bno/ 匹配 “at noon” 中的 “no”，/ly\b/ 匹配 “possibly yesterday.” 中的 “ly”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\B&lt;/td&gt;
      &lt;td&gt;匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。&lt;br /&gt;&lt;br /&gt;例如，/\Bon/ 匹配 “at noon” 中的 “on”，/ye\B/ 匹配 “possibly yesterday.” 中的 “ye”。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dom&quot;&gt;DOM&lt;/h2&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/htmldom/index.asp&quot;&gt;HTML DOM 教程 W3C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/js/js_htmldom.asp&quot;&gt;JavaScript HTML DOM W3C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/dom_obj_document.asp&quot;&gt;参考手册-HTML DOM Document 对象&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/dom_obj_all.asp&quot;&gt;参考手册-HTML DOM Element 对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-13&quot;&gt;基本任务&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先来一些简单的，在你的util.js中完成以下任务：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 为element增加一个样式名为newClassName的新样式
function addClass(element, newClassName) {
    // your implement
}

// 移除element中的样式oldClassName
function removeClass(element, oldClassName) {
    // your implement
}

// 判断siblingNode和element是否为同一个父元素下的同一级的元素，返回bool值
function isSiblingNode(element, siblingNode) {
    // your implement
}

// 获取element相对于浏览器窗口的位置，返回一个对象{x, y}
function getPosition(element) {
    // your implement
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addClass()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;对于element本身如果没有样式类，那么使用Element的className属性获取的是空字符串，则直接添加新的样式类字符串即可。对于已经有了样式类的元素，获取到原有的样式类后，在后面添加一个空格，再添加新的样式类即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;removeClass()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;获取原始的样式，然后用正则表达式去匹配这个要删掉的样式，由于是动态的正则表达式，所以要用正则的构造函数 &lt;code class=&quot;highlighter-rouge&quot;&gt;RegExp()&lt;/code&gt; 来创建，并且使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\b&lt;/code&gt; 来确定单词边界。匹配好后用空字符串替换被匹配的样式类即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isSiblingNode()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;直接判断两个父节点是不是相同&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getPosition()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;下面这些内容是我之前的思路，现在觉得太复杂，可以用另一种解决方法。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;offsetTop&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;offsetLeft&lt;/code&gt; 都是相对于最近一个有定位的父元素，如果都没有那么就是相对于 body 的偏移位置。&lt;/p&gt;

      &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;offsetParent&lt;/code&gt; 是寻找最近一个有定位的父级元素，如果没有，那么找到 body 元素。&lt;/p&gt;

      &lt;p&gt;所以这道题需要先寻找有定位的父级元素，如果都没有，那么就是相对于 body 的偏移了，可以直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;offsetTop&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;offsetLeft&lt;/code&gt;。&lt;/p&gt;

      &lt;p&gt;如果有定位的父级元素不是 body，是 A 元素，那么再寻找 A 元素的最近的有定位的父级元素，如果没有，就是相对于 body 的定位，这时，所求偏移量就是 A 的偏移量加所求元素相对于 A 的偏移量。如果 A 还有已经定位的父级元素，就继续去推，直到找到 body 为止。&lt;/p&gt;

      &lt;p&gt;这里可能要用到一个递归算法。&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;&lt;strong&gt;另一种方法：&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;getBoundingClientRect()&lt;/code&gt; 方法获取当前元素相对于可视区域的位置，再加上滚动条的位置。&lt;/p&gt;

    &lt;p&gt;关于滚动条的位置 &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollTop&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollLeft&lt;/code&gt; 这两个属性的使用，各个浏览器还都不一样。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;详情见 &lt;a href=&quot;http://www.cnblogs.com/zhenyu-whu/archive/2012/11/13/2768004.html&quot;&gt;document.body.scrollTop or document.documentElement.scrollTop&lt;/a&gt;。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;简单的说就是：FF、Opera 和 IE 浏览器认为在客户端浏览器展示的页面的内容对应于整个 HTML，所以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.documentElement&lt;/code&gt;来代表，相应的滚动距离则通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.documentElement.scrollLeft&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.documentElement.scrollTop&lt;/code&gt; 来获取，而 Safari 和 Chrome 浏览器则认为页面开始于 body 部分，从而相应的滚动距离用 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.body.scrollLeft&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.body.scrollTop&lt;/code&gt; 来获取。另外需要注意的是，FF 和 IE 的 quirks mode（兼容模式）下是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;document.body&lt;/code&gt; 来获取的。&lt;/p&gt;

    &lt;p&gt;documentElement 对应的是 html 标签，而 body 对应的是 body 标签&lt;/p&gt;

    &lt;p&gt;针对跨浏览器的解决方案则可简单的用如下代码获取：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var scrollLeft = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft); 
  var scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop); 
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 为element增加一个样式名为newClassName的新样式
function addClass(element, newClassName) {
    var oldClassName = element.className; //获取旧的样式类
    element.className = oldClassName === &quot;&quot; ? newClassName : oldClassName + &quot; &quot; + newClassName;
}

// 移除element中的样式oldClassName
function removeClass(element, oldClassName) {
    var originClassName = element.className; //获取原先的样式类
    var pattern = new RegExp(&quot;\\b&quot; + oldClassName + &quot;\\b&quot;); //使用构造函数构造动态的正则表达式
    element.className = originClassName.replace(pattern, &#39;&#39;);
}

function isSiblingNode(element, siblingNode) {
    return element.parentNode === siblingNode.parentNode;
}

function getPosition(element) {
    var pos={};
    pos.x = element.getBoundingClientRect().left + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft); 
    pos.y = element.getBoundingClientRect().top + Math.max(document.documentElement.scrollTop, document.body.scrollTop);
    return pos;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mini-&quot;&gt;mini $&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接下来挑战一个mini $，它和之前的$是不兼容的，它应该是document.querySelector的功能子集，在不直接使用document.querySelector的情况下，在你的util.js中完成以下任务：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 实现一个简单的Query
function $(selector) {

}

// 可以通过id获取DOM对象，通过#标示，例如
$(&quot;#adom&quot;); // 返回id为adom的DOM对象

// 可以通过tagName获取DOM对象，例如
$(&quot;a&quot;); // 返回第一个&amp;lt;a&amp;gt;对象

// 可以通过样式名称获取DOM对象，例如
$(&quot;.classa&quot;); // 返回第一个样式定义包含classa的对象

// 可以通过attribute匹配获取DOM对象，例如
$(&quot;[data-log]&quot;); // 返回第一个包含属性data-log的对象

$(&quot;[data-time=2015]&quot;); // 返回第一个包含属性data-time且值为2015的对象

// 可以通过简单的组合提高查询便利性，例如
$(&quot;#adom .classa&quot;); // 返回id为adom的DOM所包含的所有子节点中，第一个样式定义包含classa的对象
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.imooc.com/code/4477&quot;&gt;Sizzle选择器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/xesam/archive/2012/02/15/2352466.html&quot;&gt;Sizzle引擎–原理与实践（一）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/rubylouvre/archive/2011/01/24/1942818.html&quot;&gt;Sizzle是怎样工作的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过空格拆分参数 selector，因为可能是组合查询。拆分为数组 selectorArr&lt;/li&gt;
  &lt;li&gt;遍历 selectorArr，条件判断各种情况。&lt;/li&gt;
  &lt;li&gt;得到节点的 Element 对象后，以这个对象为父节点，继续下一层的判断。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//多个选择器有点难到我了，看了一些资料觉得思路应该如下：
//1.如果存在#，直接从#开始向后查
//2.如果存在tag直接找到所有的tag然后向后查
//3.样式类，属性，从后向前查，得到它所有的父节点名称，去筛选匹配
//以上的做法有点太复杂，我还是做一个简单的正向匹配吧。
function $(selector) {

    if (!selector) {
        return null;
    }

    if (selector == document) {
        return document;
    }

    selector = selector.trim();
    if (selector.indexOf(&quot; &quot;) !== -1) { //若存在空格
        var selectorArr = selector.split(/\s+/); //拆成数组

        var rootScope = myQuery(selectorArr[0]); //第一次的查找范围
        var i = null;
        var j = null;
        var result = [];
        //循环选择器中的每一个元素
        for (i = 1; i &amp;lt; selectorArr.length; i++) {
            for (j = 0; j &amp;lt; rootScope.length; j++) {
                result.push(myQuery(selectorArr[i], rootScope[j]));
            }
            // rootScope = result;
            // 目前这个方法还有bug
        }
        return result[0][0];
    } else { //只有一个，直接查询
        return myQuery(selector, document)[0];
    }
}

/**
 * 针对一个内容查找结果 success
 * @param  {String} selector 选择器内容
 * @param  {Element} root    根节点元素
 * @return {NodeList数组}    节点列表，可能是多个节点也可能是一个
 */
function myQuery(selector, root) {
    var signal = selector[0]; //
    var allChildren = null;
    var content = selector.substr(1);
    var currAttr = null;
    var result = [];
    root = root || document; //若没有给root，赋值document
    switch (signal) {
        case &quot;#&quot;:
            result.push(document.getElementById(content));
            break;
        case &quot;.&quot;:
            allChildren = root.getElementsByTagName(&quot;*&quot;);
            // var pattern0 = new RegExp(&quot;\\b&quot; + content + &quot;\\b&quot;);
            for (i = 0; i &amp;lt; allChildren.length; i++) {
                currAttr = allChildren[i].getAttribute(&quot;class&quot;);
                if (currAttr !== null) {
                    var currAttrsArr = currAttr.split(/\s+/);
                    console.log(currAttr);
                    for (j = 0; j &amp;lt; currAttrsArr.length; j++) {
                        if (content === currAttrsArr[j]) {
                            result.push(allChildren[i]);
                            console.log(result);
                        }
                    }
                }
            }
            break;
        case &quot;[&quot;: //属性选择
            if (content.search(&quot;=&quot;) == -1) { //只有属性，没有值
                allChildren = root.getElementsByTagName(&quot;*&quot;);
                for (i = 0; i &amp;lt; allChildren.length; i++) {
                    if (allChildren[i].getAttribute(selector.slice(1, -1)) !== null) {
                        result.push(allChildren[i]);
                    }
                }
            } else { //既有属性，又有值
                allChildren = root.getElementsByTagName(&quot;*&quot;);
                var pattern = /\[(\w+)\s*\=\s*(\w+)\]/; //为了分离等号前后的内容
                var cut = selector.match(pattern); //分离后的结果，为数组
                var key = cut[1]; //键
                var value = cut[2]; //值
                for (i = 0; i &amp;lt; allChildren.length; i++) {
                    if (allChildren[i].getAttribute(key) == value) {
                        result.push(allChildren[i]);
                    }
                }
            }
            break;
        default: //tag
            result = root.getElementsByTagName(selector);
            break;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-14&quot;&gt;事件&lt;/h2&gt;

&lt;h3 id=&quot;section-15&quot;&gt;绑定注册事件与移除事件&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 给一个element绑定一个针对event事件的响应，响应函数为listener
function addEvent(element, event, listener) {
    if (element.addEventListener) {
        element.addEventListener(event,listener);
    } else if(element.attachEvent){
        element.attachEvent(&quot;on&quot;+event,listener);
    }
}

// 移除element对象对于event事件发生时执行listener的响应
function removeEvent(element, event, listener) {
    if (element.removeEventListenr) {
        element.removeEventListenr(event,listener);
    } else if(element.detachEvent){
        element.detachEvent(&quot;on&quot;+event,listener);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;相关说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IE8+ 支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;addEventListener()&lt;/code&gt;。IE8 以下的版本使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;attachEvent()&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;attachEvent()&lt;/code&gt; 不支持时间捕获。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;attachEvent()&lt;/code&gt; 第一个参数事件处理程序属性名使用前缀 on。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;attachEvent()&lt;/code&gt; 允许相同的事件处理程序函数注册多次。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;click--enter-&quot;&gt;click 与 enter 键事件绑定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 实现对click事件的绑定
function addClickEvent(element, listener) {
    addEvent(element, &quot;click&quot;, listener);
}

// 实现对于按Enter键时的事件绑定
function addEnterEvent(element, listener) {
    addEvent(element, &quot;keydown&quot;, function(event) {
        if (event.keyCode == 13) {
            listener();
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;相关说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这里我直接使用了上一个任务写好的 &lt;code class=&quot;highlighter-rouge&quot;&gt;addEvent()&lt;/code&gt; 函数。这样可以简化代码，并有良好的兼容性。&lt;/p&gt;

&lt;p&gt;enter 键的 keyCode 为 13。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-16&quot;&gt;事件代理&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/Aralic/p/4446030.html&quot;&gt;javascript事件代理（委托）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/leo388/p/4461579.html&quot;&gt;JS - 事件代理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function delegateEvent(element,tag,eventName,listener){
    addEvent(element, eventName, function(event){
        var target = event.target || event.srcElement;
        if(target.tagName.toLowerCase() == tag.toLowerCase()) {
            listener.call(target, event);
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bom&quot;&gt;BOM&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 判断是否为IE浏览器，返回-1或者版本号
function isIE() {
    var s = navigator.userAgent.toLowerCase();
    console.log(s);
    //ie10的信息：
    //mozilla/5.0 (compatible; msie 10.0; windows nt 6.2; trident/6.0)
    //ie11的信息：
    //mozilla/5.0 (windows nt 6.1; trident/7.0; slcc2; .net clr 2.0.50727; .net clr 3.5.30729; .net clr 3.0.30729; media center pc 6.0; .net4.0c; .net4.0e; infopath.2; rv:11.0) like gecko
    var ie = s.match(/rv:([\d.]+)/) || s.match(/msie ([\d.]+)/);
    if(ie) {
        return ie[1];
    } else {
        return -1;
    }
}

// 设置cookie
function setCookie(cookieName, cookieValue, expiredays) {
    var cookie = cookieName + &quot;=&quot; + encodeURIComponent(cookieValue);
    if (typeof expiredays === &quot;number&quot;) {
        cookie += &quot;;max-age=&quot; + (expiredays * 60 * 60 * 24);
    }
    document.cookie = cookie;
}

// 获取cookie值
function getCookie(cookieName) {
    var cookie = {};
    var all = document.cookie;
    if (all===&quot;&quot;) {
        return cookie;
    }
    var list = all.split(&quot;; &quot;);
    for (var i = 0; i &amp;lt; list.length; i++) {
        var p = list[i].indexOf(&quot;=&quot;);
        var name = list[i].substr(0, p);
        var value = list[i].substr(p + 1);
        value = decodeURIComponent(value);
        cookie[name] = value;
    }
    return cookie;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;参考自：JavaScript权威指南&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ajax&quot;&gt;Ajax&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 学习Ajax，并尝试自己封装一个Ajax方法。实现如下方法：
function ajax(url, options) {
    // your implement
}

// 使用示例：
ajax(
    &#39;http://localhost:8080/server/ajaxtest&#39;, 
    {
        data: {
            name: &#39;simon&#39;,
            password: &#39;123456&#39;
        },
        onsuccess: function (responseText, xhr) {
            console.log(responseText);
        }
    }
);　
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function ajax(url, options) {

    var dataResult; //结果data

    // 处理data
    if (typeof(options.data) === &#39;object&#39;) {
        var str = &#39;&#39;;
        for (var c in options.data) {
            str = str + c + &#39;=&#39; + options.data[c] + &#39;&amp;amp;&#39;;
        }
        dataResult = str.substring(0, str.length - 1);
    }

    // 处理type
    options.type = options.type || &#39;GET&#39;;

    //获取XMLHttpRequest对象
    var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&#39;Microsoft.XMLHTTP&#39;);

    // 发送请求
    oXhr.open(options.type, url, true);
    if (options.type == &#39;GET&#39;) {
        oXhr.send(null);
    } else {
        oXhr.setRequestHeader(&#39;Content-type&#39;, &#39;application/x-www-form-urlencoded&#39;);
        oXhr.send(dataResult);
    }

    // readyState
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                if (options.onsuccess) {
                    options.onsuccess(xhr.responseText, xhr.responseXML);
                }
            } else {
                if (options.onfail) {
                    options.onfail();
                }
            }
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先是处理 data，因为测试用例中的 data 是对象，所以把它遍历出来，把键和值中间用 = 连接，和下一组数据用 &amp;amp; 连接。&lt;/li&gt;
  &lt;li&gt;处理 type，默认是 GET 请求。&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; 指明请求方法和 url。方法一般为 GET 或 POST。&lt;/li&gt;
  &lt;li&gt;调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;send()&lt;/code&gt; 方法，GET 请求没有主体，所以应该传递 null 或省略这个参数。POST 请求有主体，同时使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;setRequestHeaders()&lt;/code&gt; 来指定 “Content-type” 头。这样便成功发送了请求。&lt;/li&gt;
  &lt;li&gt;取的响应。一个完整的 HTTP 响应是由状态码、响应头集合、响应主体组成。
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;readyState&lt;/code&gt; 是一个整数，它指定了 HTTP 请求的状态。其值和含义如下表：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;值&lt;/th&gt;
          &lt;th&gt;含义&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;open() 尚未调用&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;open() 已调用&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;接收到响应头信息&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;接收到响应主体&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;响应完成&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;statusText&lt;/code&gt; 属性以数字和文本的形式返回 HTTP 状态码。这些属性保存标准的 HTTP 值。如，200和 “OK” 表示成功请求，404和 “Not Found” 表示 URL 不能匹配服务器上的任何资源。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getResponseHeader()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;getAllResponseHeaders()&lt;/code&gt; 能查询响应头。&lt;/li&gt;
      &lt;li&gt;响应主体可以从 &lt;code class=&quot;highlighter-rouge&quot;&gt;responseText&lt;/code&gt; 属性中得到文本形式的，从 &lt;code class=&quot;highlighter-rouge&quot;&gt;responseXML&lt;/code&gt; 属性中得到 Document 形式的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;补充一点 &lt;code class=&quot;highlighter-rouge&quot;&gt;onreadystatechange&lt;/code&gt; 事件会在 &lt;code class=&quot;highlighter-rouge&quot;&gt;readyState&lt;/code&gt; 改变时被触发。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/ajax/index.asp&quot;&gt;Ajax W3C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/wa-lo-comet/&quot;&gt;Comet：基于 HTTP 长连接的“服务器推”技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-17&quot;&gt;练习1：处理兴趣列表&lt;/h2&gt;

&lt;h3 id=&quot;section-18&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002&lt;/code&gt;目录下创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_1.html&lt;/code&gt;文件，以及一个&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录和&lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt;目录，在&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_1.js&lt;/code&gt;，并将之前写的&lt;code class=&quot;highlighter-rouge&quot;&gt;util.js&lt;/code&gt;也拷贝到&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录下。然后完成以下需求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在页面中，有一个单行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用半角逗号来作为不同爱好的分隔。&lt;/p&gt;

&lt;p&gt;当点击按钮时，把用户输入的兴趣爱好，按照上面所说的分隔符分开后保存到一个数组，过滤掉空的、重复的爱好，在按钮下方创建一个段落显示处理后的爱好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;单行变成多行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用换行、空格（全角/半角）、逗号（全角/半角）、顿号、分号来作为不同爱好的分隔。&lt;/p&gt;

&lt;p&gt;当点击按钮时的行为同上&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用户输入的爱好数量不能超过10个，也不能什么都不输入。当发生异常时，在按钮上方显示一段红色的错误提示文字，并且不继续执行后面的行为；当输入正确时，提示文字消失。&lt;/p&gt;

&lt;p&gt;同时，当点击按钮时，不再是输出到一个段落，而是每一个爱好输出成为一个checkbox，爱好内容作为checkbox的label。&lt;/p&gt;

&lt;h3 id=&quot;section-19&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;主要就是对字符串的操作，&lt;code class=&quot;highlighter-rouge&quot;&gt;split()&lt;/code&gt; 的使用，以及正则表达式的使用。&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_1.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-21&quot;&gt;练习2：倒计时&lt;/h2&gt;

&lt;h3 id=&quot;section-22&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在和上一任务同一目录下面创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_2.html&lt;/code&gt;文件，在&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_2.js&lt;/code&gt;，并在其中编码，实现一个倒计时功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;界面首先有一个文本输入框，允许按照特定的格式&lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD&lt;/code&gt;输入年月日；&lt;/li&gt;
  &lt;li&gt;输入框旁有一个按钮，点击按钮后，计算当前距离输入的日期的00:00:00有多少时间差&lt;/li&gt;
  &lt;li&gt;在页面中显示，距离YYYY年MM月DD日还有XX天XX小时XX分XX秒&lt;/li&gt;
  &lt;li&gt;每一秒钟更新倒计时上显示的数&lt;/li&gt;
  &lt;li&gt;如果时差为0，则倒计时停止&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-23&quot;&gt;思路&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; 方法会不停地调用函数，直到 &lt;code class=&quot;highlighter-rouge&quot;&gt;clearInterval()&lt;/code&gt; 被调用或窗口被关闭。由 &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; 返回的 ID 值可用作 &lt;code class=&quot;highlighter-rouge&quot;&gt;clearInterval()&lt;/code&gt; 方法的参数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clearInterval()&lt;/code&gt; 方法可取消由 &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; 设置的 timeout。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clearInterval()&lt;/code&gt; 方法的参数必须是由 &lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval()&lt;/code&gt; 返回的 ID 值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt; 方法用于在指定的毫秒数后调用函数或计算表达式。&lt;/p&gt;

    &lt;p&gt;setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clearTimeout()&lt;/code&gt; 方法可取消由 setTimeout() 方法设置的 timeout。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-24&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_2.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-25&quot;&gt;练习3：图片轮播&lt;/h2&gt;

&lt;h3 id=&quot;section-26&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在和上一任务同一目录下面创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_3.html&lt;/code&gt;文件，在&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_3.js&lt;/code&gt;，并在其中编码，实现一个轮播图的功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;图片数量及URL均在HTML中写好&lt;/li&gt;
  &lt;li&gt;可以配置轮播的顺序（正序、逆序）、是否循环、间隔时长&lt;/li&gt;
  &lt;li&gt;图片切换的动画要流畅&lt;/li&gt;
  &lt;li&gt;在轮播图下方自动生成对应图片的小点，点击小点，轮播图自动动画切换到对应的图片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;效果示例：&lt;a href=&quot;http://echarts.baidu.com/&quot;&gt;http://echarts.baidu.com/&lt;/a&gt; 上面的轮播图（不需要做左右两个箭头）&lt;/p&gt;

&lt;h3 id=&quot;section-27&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;将图片排列成一排，一起向左运动，每次运动的距离刚好是一张图片的宽度。&lt;/p&gt;

&lt;p&gt;对于下面的小圆点，使用事件代理，将事件传递给每个 a 标签。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.itxueyuan.org/view/6323.html&quot;&gt;JS图片切换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-28&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_3.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-29&quot;&gt;关于变速运动&lt;/h3&gt;

&lt;p&gt;评论中有人问到运动部分为什么这样写，下面我讲一下吧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function startMove(target) {
    clearInterval(timerInner);
    timerInner = setInterval(function() {
        var speed = (target - imgListDiv.offsetLeft) / 6;
        speed = speed &amp;gt; 0 ? Math.ceil(speed) : Math.floor(speed);

        imgListDiv.style.left = imgListDiv.offsetLeft + speed + &quot;px&quot;;
    }, 30);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面是运动部分代码。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; 是运动终点的位置。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;首先停止计时器，为了避免上一次调用方法时，计时器没有关闭带来的干扰。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clearInterval(timerInner);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下面开始开启计时器，每隔 30ms 执行一次内部的函数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;变速运动&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var speed = (target - imgListDiv.offsetLeft) / 6;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;逐渐变慢，最后停止，距离越远速度越大，速度由距离决定&lt;/p&gt;

    &lt;p&gt;速度=(目标值-当前值)/缩放系数&lt;/p&gt;

    &lt;p&gt;这样写的原因就是为了让它做缓冲运动，而不是匀速运动，这样给用户带来的交互感觉会更好。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;速度取整&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;speed = speed &amp;gt; 0 ? Math.ceil(speed) : Math.floor(speed);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;像素不能是小数，所以速度大于0的时候，向上取整。速度小于0时，向下取整&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后关于运动终止条件。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;imgListDiv.style.left = imgListDiv.offsetLeft + speed + &quot;px&quot;;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;由这一行可以看出，&lt;code class=&quot;highlighter-rouge&quot;&gt;imgListDiv.style.left&lt;/code&gt; 在不断增大，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;imgListDiv.offsetLeft&lt;/code&gt; 在不断增大。这两个是相同的属性，只不过一个是在赋值时使用，第二个是在取值时使用。&lt;/p&gt;

    &lt;p&gt;再看这行代码，由于这部分是每个30ms执行一次的，所以继续执行到这里。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var speed = (target - imgListDiv.offsetLeft) / 6;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;当不断增大的 &lt;code class=&quot;highlighter-rouge&quot;&gt;imgListDiv.offsetLeft&lt;/code&gt; 等于 &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; 时，&lt;code class=&quot;highlighter-rouge&quot;&gt;speed&lt;/code&gt; 为0。宏观表现为不再运动，这便是运动终止的状态，但是这里的方法还是不断在执行，每个30ms在执行。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-30&quot;&gt;练习4：输入框即时提示&lt;/h2&gt;

&lt;h3 id=&quot;section-31&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在和上一任务同一目录下面创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_4.html&lt;/code&gt;文件，在&lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt;目录中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;task0002_4.js&lt;/code&gt;，并在其中编码，实现一个类似百度搜索框的输入提示的功能。&lt;/p&gt;

&lt;p&gt;要求如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;允许使用鼠标点击选中提示栏中的某个选项&lt;/li&gt;
  &lt;li&gt;允许使用键盘上下键来选中提示栏中的某个选项，回车确认选中&lt;/li&gt;
  &lt;li&gt;选中后，提示内容变更到输入框中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;初级班：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不要求和后端交互，可以自己伪造一份提示数据例如：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var suggestData = [&#39;Simon&#39;, &#39;Erik&#39;, &#39;Kener&#39;];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;中级班：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自己搭建一个后端Server，使用Ajax来获取提示数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-32&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;这里我使用了给 input 标签加 input 监听，即输入框内容发生改变时，触发事件。并兼容到 IE7。&lt;/p&gt;

&lt;p&gt;关于 input 监听的代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function addInputListener() {
    if (inputArea.addEventListener) { // all browsers except IE before version 9
        inputArea.addEventListener(&quot;input&quot;, OnInput);
    }
    if (inputArea.attachEvent) { // Internet Explorer and Opera
        inputArea.attachEvent(&quot;onpropertychange&quot;, OnPropChanged); // Internet Explorer
    }
}

// Firefox, Google Chrome, Opera, Safari from version 5, Internet Explorer from version 9
function OnInput(event) {
    var inputValue = event.target.value;
    handleInput(inputValue);
}
// Internet Explorer
function OnPropChanged(event) {
    var inputValue = &quot;&quot;;
    if (event.propertyName.toLowerCase() == &quot;value&quot;) {
        inputValue = event.srcElement.value;
        handleInput(inputValue);
    }
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中 handleInput() 为下一步要执行的方法。&lt;/p&gt;

&lt;p&gt;其实后来想了想也可以使用 keyup 事件了做这个任务。&lt;/p&gt;

&lt;p&gt;匹配的过程同样适用正则表达式，从开头开始匹配。遍历备选单词，如果匹配成功，则放入 li 标签中，准备展示。&lt;/p&gt;

&lt;p&gt;然后分别添加点击事件，键盘的 keydown 事件，用来选中提示出的单词。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://help.dottoro.com/ljhxklln.php&quot;&gt;oninput 事件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-33&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_4.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-34&quot;&gt;练习5：拖拽交互&lt;/h2&gt;

&lt;h3 id=&quot;section-35&quot;&gt;任务要求&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;实现一个可拖拽交互的界面&lt;/li&gt;
  &lt;li&gt;如示例图，左右两侧各有一个容器，里面的选项可以通过拖拽来左右移动&lt;/li&gt;
  &lt;li&gt;被选择拖拽的容器在拖拽过程后，在原容器中消失，跟随鼠标移动&lt;/li&gt;
  &lt;li&gt;注意拖拽释放后，要添加到准确的位置&lt;/li&gt;
  &lt;li&gt;拖拽到什么位置认为是可以添加到新容器的规则自己定&lt;/li&gt;
  &lt;li&gt;注意交互中良好的用户体验和使用引导&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-36&quot;&gt;思路&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;页面布局时，将要被拖拽的 div 设置为绝对定位，因为这样在后面拖拽的时候才方便更改坐标。&lt;/li&gt;
  &lt;li&gt;初始化界面的时候，首先让 div 块按照相应的高度重新排列一下。&lt;/li&gt;
  &lt;li&gt;拖拽方法的实现。由 mousedown mousemove mouseup 三部分组成。&lt;/li&gt;
  &lt;li&gt;在 mousemove 中判断，不能让鼠标拖出浏览器窗口。&lt;/li&gt;
  &lt;li&gt;在 mouseup 中判断，是否到达指定区域。完成拖拽。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我在这里没有使用 html5 中的拖拽 API，所以兼容性还是很好的。&lt;/p&gt;

&lt;h3 id=&quot;section-37&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_5.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-38&quot;&gt;最终作品&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/index.html&quot;&gt;在线 Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;加油！向着下一个目标前进！&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Apr 2015 03:06:05 +0800</pubDate>
        <link>/2015/04/23/baidu-ife-2-javascript/</link>
        <guid isPermaLink="true">/2015/04/23/baidu-ife-2-javascript/</guid>
        
        
        <category>Front-end</category>
        
        <category>JavaScript</category>
        
      </item>
    
  </channel>
</rss>
